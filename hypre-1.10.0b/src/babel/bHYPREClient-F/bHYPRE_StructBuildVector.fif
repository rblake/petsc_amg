C       
C       File:          bHYPRE_StructBuildVector_Impl.f
C       Symbol:        bHYPRE.StructBuildVector-v1.0.0
C       Symbol Type:   interface
C       Babel Version: 0.10.8
C       Description:   Client-side documentation text for bHYPRE.StructBuildVector
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       babel-version = 0.10.8
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "bHYPRE.StructBuildVector" (version 1.0.0)
C       




C       
C       Cast method for interface and type conversions.
C       

        subroutine bHYPRE_StructBuildVector__cast_f(ref, retval)
        implicit none
C       in opaque ref
        integer*8 ref
C       out bHYPRE.StructBuildVector retval
        integer*8 retval
        end


C       
C       Cast method for interface and class type conversions.
C       

        subroutine bHYPRE_StructBuildVector__cast2_f(self, name, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       in string name
        character*(*) name
C       out opaque retval
        integer*8 retval
        end


C       
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine bHYPRE_StructBuildVector_addRef_f(self)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
        end


C       
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine bHYPRE_StructBuildVector_deleteRef_f(self)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
        end


C       
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine bHYPRE_StructBuildVector_isSame_f(self, iobj, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       in sidl.BaseInterface iobj
        integer*8 iobj
C       out bool retval
        logical retval
        end


C       
C       Check whether the object can support the specified interface or
C       class.  If the <code>sidl</code> type name in <code>name</code>
C       is supported, then a reference to that object is returned with the
C       reference count incremented.  The callee will be responsible for
C       calling <code>deleteRef</code> on the returned object.  If
C       the specified type is not supported, then a null reference is
C       returned.
C       

        subroutine bHYPRE_StructBuildVector_queryInt_f(self, name,
     &     retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       in string name
        character*(*) name
C       out sidl.BaseInterface retval
        integer*8 retval
        end


C       
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine bHYPRE_StructBuildVector_isType_f(self, name, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       in string name
        character*(*) name
C       out bool retval
        logical retval
        end


C       
C       Return the meta-data about the class implementing this interface.
C       

        subroutine bHYPRE_StructBuildVector_getClassInfo_f(self, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       out sidl.ClassInfo retval
        integer*8 retval
        end


C       
C       Set the MPI Communicator.  DEPRECATED, Use Create()
C       
C       

        subroutine bHYPRE_StructBuildVector_SetCommunicator_f(self,
     &     mpi_comm, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       in opaque mpi_comm
        integer*8 mpi_comm
C       out int retval
        integer*4 retval
        end


C       
C       Prepare an object for setting coefficient values, whether for
C       the first time or subsequently.
C       
C       

        subroutine bHYPRE_StructBuildVector_Initialize_f(self, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       Finalize the construction of an object before using, either
C       for the first time or on subsequent uses. {\tt Initialize}
C       and {\tt Assemble} always appear in a matched set, with
C       Initialize preceding Assemble. Values can only be set in
C       between a call to Initialize and Assemble.
C       
C       

        subroutine bHYPRE_StructBuildVector_Assemble_f(self, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       The problem definition interface is a {\it builder} that
C       creates an object that contains the problem definition
C       information, e.g. a matrix. To perform subsequent operations
C       with that object, it must be returned from the problem
C       definition object. {\tt GetObject} performs this function.
C       At compile time, the type of the returned object is unknown.
C       Thus, the returned type is a sidl.BaseInterface.
C       QueryInterface or Cast must be used on the returned object to
C       convert it into a known type.
C       
C       

        subroutine bHYPRE_StructBuildVector_GetObject_f(self, A, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       out sidl.BaseInterface A
        integer*8 A
C       out int retval
        integer*4 retval
        end


C       
C       Method:  SetGrid[]
C       

        subroutine bHYPRE_StructBuildVector_SetGrid_f(self, grid,
     &     retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       in bHYPRE.StructGrid grid
        integer*8 grid
C       out int retval
        integer*4 retval
        end


C       
C       Method:  SetNumGhost[]
C       

        subroutine bHYPRE_StructBuildVector_SetNumGhost_f(self,
     &     num_ghost, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       out int retval
        integer*4 retval
C       in rarray<int> num_ghost(dim2)
        integer*4 num_ghost(0:dim2-1)
        end


C       
C       Method:  SetValue[]
C       

        subroutine bHYPRE_StructBuildVector_SetValue_f(self, grid_index,
     &     value, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       in double value
        double precision value
C       out int retval
        integer*4 retval
C       in rarray<int> grid_index(dim)
        integer*4 grid_index(0:dim-1)
        end


C       
C       Method:  SetBoxValues[]
C       

        subroutine bHYPRE_StructBuildVector_SetBoxValues_f(self, ilower,
     &     iupper, values, retval)
        implicit none
C       in bHYPRE.StructBuildVector self
        integer*8 self
C       out int retval
        integer*4 retval
C       in rarray<int> ilower(dim)
        integer*4 ilower(0:dim-1)
C       in rarray<int> iupper(dim)
        integer*4 iupper(0:dim-1)
C       in rarray<double> values(nvalues)
        double precision values(0:nvalues-1)
        end
