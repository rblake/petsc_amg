C       
C       File:          bHYPRE_SStructGrid_Impl.f
C       Symbol:        bHYPRE.SStructGrid-v1.0.0
C       Symbol Type:   class
C       Babel Version: 0.10.4
C       Description:   Client-side documentation text for bHYPRE.SStructGrid
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       babel-version = 0.10.4
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "bHYPRE.SStructGrid" (version 1.0.0)
C       
C       The semi-structured grid class.
C       
C       




C       
C       Create an instance of class bHYPRE.SStructGrid
C       

        subroutine bHYPRE_SStructGrid__create_f(retval)
        implicit none
C       out bHYPRE.SStructGrid retval
        integer*8 retval
        end


C       
C       Cast method for interface and type conversions.
C       

        subroutine bHYPRE_SStructGrid__cast_f(ref, retval)
        implicit none
C       in opaque ref
        integer*8 ref
C       out bHYPRE.SStructGrid retval
        integer*8 retval
        end


C       
C       Cast method for interface and class type conversions.
C       

        subroutine bHYPRE_SStructGrid__cast2_f(self, name, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in string name
        character*(*) name
C       out opaque retval
        integer*8 retval
        end


C       
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine bHYPRE_SStructGrid_addRef_f(self)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
        end


C       
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine bHYPRE_SStructGrid_deleteRef_f(self)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
        end


C       
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine bHYPRE_SStructGrid_isSame_f(self, iobj, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in sidl.BaseInterface iobj
        integer*8 iobj
C       out bool retval
        logical retval
        end


C       
C       Check whether the object can support the specified interface or
C       class.  If the <code>sidl</code> type name in <code>name</code>
C       is supported, then a reference to that object is returned with the
C       reference count incremented.  The callee will be responsible for
C       calling <code>deleteRef</code> on the returned object.  If
C       the specified type is not supported, then a null reference is
C       returned.
C       

        subroutine bHYPRE_SStructGrid_queryInt_f(self, name, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in string name
        character*(*) name
C       out sidl.BaseInterface retval
        integer*8 retval
        end


C       
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine bHYPRE_SStructGrid_isType_f(self, name, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in string name
        character*(*) name
C       out bool retval
        logical retval
        end


C       
C       Return the meta-data about the class implementing this interface.
C       

        subroutine bHYPRE_SStructGrid_getClassInfo_f(self, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       out sidl.ClassInfo retval
        integer*8 retval
        end


C       
C       Set the number of dimensions {\tt ndim} and the number of
C       structured parts {\tt nparts}.
C       
C       

        subroutine bHYPRE_SStructGrid_Create_f(mpi_comm, ndim, nparts,
     &     retval)
        implicit none
C       in bHYPRE.MPICommunicator mpi_comm
        integer*8 mpi_comm
C       in int ndim
        integer*4 ndim
C       in int nparts
        integer*4 nparts
C       out bHYPRE.SStructGrid retval
        integer*8 retval
        end


C       
C       Method:  SetNumDimParts[]
C       

        subroutine bHYPRE_SStructGrid_SetNumDimParts_f(self, ndim,
     &     nparts, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in int ndim
        integer*4 ndim
C       in int nparts
        integer*4 nparts
C       out int retval
        integer*4 retval
        end


C       
C       Method:  SetCommunicator[]
C       

        subroutine bHYPRE_SStructGrid_SetCommunicator_f(self, mpi_comm,
     &     retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in bHYPRE.MPICommunicator mpi_comm
        integer*8 mpi_comm
C       out int retval
        integer*4 retval
        end


C       
C       Set the extents for a box on a structured part of the grid.
C       
C       

        subroutine bHYPRE_SStructGrid_SetExtents_f(self, part, ilower,
     &     iupper, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in int part
        integer*4 part
C       out int retval
        integer*4 retval
C       in rarray<int> ilower(dim)
        integer*4 ilower(0:dim-1)
C       in rarray<int> iupper(dim)
        integer*4 iupper(0:dim-1)
        end


C       
C       Describe the variables that live on a structured part of the
C       grid.  Input: part number, variable number, total number of
C       variables on that part (needed for memory allocation),
C       variable type.
C       
C       

        subroutine bHYPRE_SStructGrid_SetVariable_f(self, part, var,
     &     nvars, vartype, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in int part
        integer*4 part
C       in int var
        integer*4 var
C       in int nvars
        integer*4 nvars
C       in bHYPRE.SStructVariable vartype
        integer*4 vartype
C       out int retval
        integer*4 retval
        end


C       
C       Describe additional variables that live at a particular
C       index.  These variables are appended to the array of
C       variables set in {\tt SetVariables}, and are referenced as
C       such.
C       
C       

        subroutine bHYPRE_SStructGrid_AddVariable_f(self, part, index,
     &     var, vartype, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in int part
        integer*4 part
C       in int var
        integer*4 var
C       in bHYPRE.SStructVariable vartype
        integer*4 vartype
C       out int retval
        integer*4 retval
C       in rarray<int> index(dim)
        integer*4 index(0:dim-1)
        end


C       
C       Describe how regions just outside of a part relate to other
C       parts.  This is done a box at a time.
C       
C       The indexes {\tt ilower} and {\tt iupper} map directly to the
C       indexes {\tt nbor\_ilower} and {\tt nbor\_iupper}.  Although,
C       it is required that indexes increase from {\tt ilower} to
C       {\tt iupper}, indexes may increase and/or decrease from {\tt
C       nbor\_ilower} to {\tt nbor\_iupper}.
C       
C       The {\tt index\_map} describes the mapping of indexes 0, 1,
C       and 2 on part {\tt part} to the corresponding indexes on part
C       {\tt nbor\_part}.  For example, triple (1, 2, 0) means that
C       indexes 0, 1, and 2 on part {\tt part} map to indexes 1, 2,
C       and 0 on part {\tt nbor\_part}, respectively.
C       
C       NOTE: All parts related to each other via this routine must
C       have an identical list of variables and variable types.  For
C       example, if part 0 has only two variables on it, a cell
C       centered variable and a node centered variable, and we
C       declare part 1 to be a neighbor of part 0, then part 1 must
C       also have only two variables on it, and they must be of type
C       cell and node.
C       
C       

        subroutine bHYPRE_SStructGrid_SetNeighborBox_f(self, part,
     &     ilower, iupper, nbor_part, nbor_ilower, nbor_iupper,
     &     index_map, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in int part
        integer*4 part
C       in int nbor_part
        integer*4 nbor_part
C       out int retval
        integer*4 retval
C       in rarray<int> ilower(dim)
        integer*4 ilower(0:dim-1)
C       in rarray<int> iupper(dim)
        integer*4 iupper(0:dim-1)
C       in rarray<int> nbor_ilower(dim)
        integer*4 nbor_ilower(0:dim-1)
C       in rarray<int> nbor_iupper(dim)
        integer*4 nbor_iupper(0:dim-1)
C       in rarray<int> index_map(dim)
        integer*4 index_map(0:dim-1)
        end


C       
C       Add an unstructured part to the grid.  The variables in the
C       unstructured part of the grid are referenced by a global rank
C       between 0 and the total number of unstructured variables
C       minus one.  Each process owns some unique consecutive range
C       of variables, defined by {\tt ilower} and {\tt iupper}.
C       
C       NOTE: This is just a placeholder.  This part of the interface
C       is not finished.
C       
C       

        subroutine bHYPRE_SStructGrid_AddUnstructuredPart_f(self,
     &     ilower, iupper, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in int ilower
        integer*4 ilower
C       in int iupper
        integer*4 iupper
C       out int retval
        integer*4 retval
        end


C       
C       (Optional) Set periodic for a particular part.
C       
C       

        subroutine bHYPRE_SStructGrid_SetPeriodic_f(self, part,
     &     periodic, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       in int part
        integer*4 part
C       out int retval
        integer*4 retval
C       in rarray<int> periodic(dim)
        integer*4 periodic(0:dim-1)
        end


C       
C       Setting ghost in the sgrids.
C       
C       

        subroutine bHYPRE_SStructGrid_SetNumGhost_f(self, num_ghost,
     &     retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       out int retval
        integer*4 retval
C       in rarray<int> num_ghost(dim2)
        integer*4 num_ghost(0:dim2-1)
        end


C       
C       Method:  Assemble[]
C       

        subroutine bHYPRE_SStructGrid_Assemble_f(self, retval)
        implicit none
C       in bHYPRE.SStructGrid self
        integer*8 self
C       out int retval
        integer*4 retval
        end
