C       
C       File:          sidl_DLL_Impl.f
C       Symbol:        sidl.DLL-v0.9.3
C       Symbol Type:   class
C       Babel Version: 0.10.4
C       Release:       $Name: V1-10-0b $
C       Revision:      @(#) $Id: sidl_DLL.fif,v 1.33 2005/12/15 00:36:07 painter Exp $
C       Description:   Client-side documentation text for sidl.DLL
C       
C       Copyright (c) 2000-2002, The Regents of the University of California.
C       Produced at the Lawrence Livermore National Laboratory.
C       Written by the Components Team <components@llnl.gov>
C       All rights reserved.
C       
C       This file is part of Babel. For more information, see
C       http://www.llnl.gov/CASC/components/. Please read the COPYRIGHT file
C       for Our Notice and the LICENSE file for the GNU Lesser General Public
C       License.
C       
C       This program is free software; you can redistribute it and/or modify it
C       under the terms of the GNU Lesser General Public License (as published by
C       the Free Software Foundation) version 2.1 dated February 1999.
C       
C       This program is distributed in the hope that it will be useful, but
C       WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
C       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
C       conditions of the GNU Lesser General Public License for more details.
C       
C       You should have recieved a copy of the GNU Lesser General Public License
C       along with this program; if not, write to the Free Software Foundation,
C       Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       babel-version = 0.10.4
C       xml-url       = /home/painter/babel-0.10.4/bin/.././share/repository/sidl.DLL-v0.9.3.xml
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "sidl.DLL" (version 0.9.3)
C       
C       The <code>DLL</code> class encapsulates access to a single
C       dynamically linked library.  DLLs are loaded at run-time using
C       the <code>loadLibrary</code> method and later unloaded using
C       <code>unloadLibrary</code>.  Symbols in a loaded library are
C       resolved to an opaque pointer by method <code>lookupSymbol</code>.
C       Class instances are created by <code>createClass</code>.
C       




C       
C       Create an instance of class sidl.DLL
C       

        subroutine sidl_DLL__create_f(retval)
        implicit none
C       out sidl.DLL retval
        integer*8 retval
        end


C       
C       Cast method for interface and type conversions.
C       

        subroutine sidl_DLL__cast_f(ref, retval)
        implicit none
C       in opaque ref
        integer*8 ref
C       out sidl.DLL retval
        integer*8 retval
        end


C       
C       Cast method for interface and class type conversions.
C       

        subroutine sidl_DLL__cast2_f(self, name, retval)
        implicit none
C       in sidl.DLL self
        integer*8 self
C       in string name
        character*(*) name
C       out opaque retval
        integer*8 retval
        end


C       
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine sidl_DLL_addRef_f(self)
        implicit none
C       in sidl.DLL self
        integer*8 self
        end


C       
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine sidl_DLL_deleteRef_f(self)
        implicit none
C       in sidl.DLL self
        integer*8 self
        end


C       
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine sidl_DLL_isSame_f(self, iobj, retval)
        implicit none
C       in sidl.DLL self
        integer*8 self
C       in sidl.BaseInterface iobj
        integer*8 iobj
C       out bool retval
        logical retval
        end


C       
C       Check whether the object can support the specified interface or
C       class.  If the <code>sidl</code> type name in <code>name</code>
C       is supported, then a reference to that object is returned with the
C       reference count incremented.  The callee will be responsible for
C       calling <code>deleteRef</code> on the returned object.  If
C       the specified type is not supported, then a null reference is
C       returned.
C       

        subroutine sidl_DLL_queryInt_f(self, name, retval)
        implicit none
C       in sidl.DLL self
        integer*8 self
C       in string name
        character*(*) name
C       out sidl.BaseInterface retval
        integer*8 retval
        end


C       
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine sidl_DLL_isType_f(self, name, retval)
        implicit none
C       in sidl.DLL self
        integer*8 self
C       in string name
        character*(*) name
C       out bool retval
        logical retval
        end


C       
C       Return the meta-data about the class implementing this interface.
C       

        subroutine sidl_DLL_getClassInfo_f(self, retval)
        implicit none
C       in sidl.DLL self
        integer*8 self
C       out sidl.ClassInfo retval
        integer*8 retval
        end


C       
C       Load a dynamic link library using the specified URI.  The
C       URI may be of the form "main:", "lib:", "file:", "ftp:", or
C       "http:".  A URI that starts with any other protocol string
C       is assumed to be a file name.  The "main:" URI creates a
C       library that allows access to global symbols in the running
C       program's main address space.  The "lib:X" URI converts the
C       library "X" into a platform-specific name (e.g., libX.so) and
C       loads that library.  The "file:" URI opens the DLL from the
C       specified file path.  The "ftp:" and "http:" URIs copy the
C       specified library from the remote site into a local temporary
C       file and open that file.  This method returns true if the
C       DLL was loaded successfully and false otherwise.  Note that
C       the "ftp:" and "http:" protocols are valid only if the W3C
C       WWW library is available.
C       
C       @param uri          the URI to load. This can be a .la file
C                           (a metadata file produced by libtool) or
C                           a shared library binary (i.e., .so,
C                           .dll or whatever is appropriate for your
C                           OS)
C       @param loadGlobally <code>true</code> means that the shared
C                           library symbols will be loaded into the
C                           global namespace; <code>false</code> 
C                           means they will be loaded into a 
C                           private namespace. Some operating systems
C                           may not be able to honor the value presented
C                           here.
C       @param loadLazy     <code>true</code> instructs the loader to
C                           that symbols can be resolved as needed (lazy)
C                           instead of requiring everything to be resolved
C                           now (at load time).
C       

        subroutine sidl_DLL_loadLibrary_f(self, uri, loadGlobally,
     &     loadLazy, retval)
        implicit none
C       in sidl.DLL self
        integer*8 self
C       in string uri
        character*(*) uri
C       in bool loadGlobally
        logical loadGlobally
C       in bool loadLazy
        logical loadLazy
C       out bool retval
        logical retval
        end


C       
C       Get the library name.  This is the name used to load the
C       library in <code>loadLibrary</code> except that all file names
C       contain the "file:" protocol.
C       

        subroutine sidl_DLL_getName_f(self, retval)
        implicit none
C       in sidl.DLL self
        integer*8 self
C       out string retval
        character*(*) retval
        end


C       
C       Unload the dynamic link library.  The library may no longer
C       be used to access symbol names.  When the library is actually
C       unloaded from the memory image depends on details of the operating
C       system.
C       

        subroutine sidl_DLL_unloadLibrary_f(self)
        implicit none
C       in sidl.DLL self
        integer*8 self
        end


C       
C       Lookup a symbol from the DLL and return the associated pointer.
C       A null value is returned if the name does not exist.
C       

        subroutine sidl_DLL_lookupSymbol_f(self, linker_name, retval)
        implicit none
C       in sidl.DLL self
        integer*8 self
C       in string linker_name
        character*(*) linker_name
C       out opaque retval
        integer*8 retval
        end


C       
C       Create an instance of the sidl class.  If the class constructor
C       is not defined in this DLL, then return null.
C       

        subroutine sidl_DLL_createClass_f(self, sidl_name, retval)
        implicit none
C       in sidl.DLL self
        integer*8 self
C       in string sidl_name
        character*(*) sidl_name
C       out sidl.BaseClass retval
        integer*8 retval
        end
