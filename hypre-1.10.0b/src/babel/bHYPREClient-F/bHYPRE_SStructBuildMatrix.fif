C       
C       File:          bHYPRE_SStructBuildMatrix_Impl.f
C       Symbol:        bHYPRE.SStructBuildMatrix-v1.0.0
C       Symbol Type:   interface
C       Babel Version: 0.10.8
C       Description:   Client-side documentation text for bHYPRE.SStructBuildMatrix
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       babel-version = 0.10.8
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "bHYPRE.SStructBuildMatrix" (version 1.0.0)
C       




C       
C       Cast method for interface and type conversions.
C       

        subroutine bHYPRE_SStructBuildMatrix__cast_f(ref, retval)
        implicit none
C       in opaque ref
        integer*8 ref
C       out bHYPRE.SStructBuildMatrix retval
        integer*8 retval
        end


C       
C       Cast method for interface and class type conversions.
C       

        subroutine bHYPRE_SStructBuildMatrix__cast2_f(self, name,
     &     retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       out opaque retval
        integer*8 retval
        end


C       
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine bHYPRE_SStructBuildMatrix_addRef_f(self)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
        end


C       
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine bHYPRE_SStructBuildMatrix_deleteRef_f(self)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
        end


C       
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine bHYPRE_SStructBuildMatrix_isSame_f(self, iobj,
     &     retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in sidl.BaseInterface iobj
        integer*8 iobj
C       out bool retval
        logical retval
        end


C       
C       Check whether the object can support the specified interface or
C       class.  If the <code>sidl</code> type name in <code>name</code>
C       is supported, then a reference to that object is returned with the
C       reference count incremented.  The callee will be responsible for
C       calling <code>deleteRef</code> on the returned object.  If
C       the specified type is not supported, then a null reference is
C       returned.
C       

        subroutine bHYPRE_SStructBuildMatrix_queryInt_f(self, name,
     &     retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       out sidl.BaseInterface retval
        integer*8 retval
        end


C       
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine bHYPRE_SStructBuildMatrix_isType_f(self, name,
     &     retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       out bool retval
        logical retval
        end


C       
C       Return the meta-data about the class implementing this interface.
C       

        subroutine bHYPRE_SStructBuildMatrix_getClassInfo_f(self,
     &     retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       out sidl.ClassInfo retval
        integer*8 retval
        end


C       
C       Set the MPI Communicator.  DEPRECATED, Use Create()
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_SetCommunicator_f(self,
     &     mpi_comm, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in opaque mpi_comm
        integer*8 mpi_comm
C       out int retval
        integer*4 retval
        end


C       
C       Prepare an object for setting coefficient values, whether for
C       the first time or subsequently.
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_Initialize_f(self, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       Finalize the construction of an object before using, either
C       for the first time or on subsequent uses. {\tt Initialize}
C       and {\tt Assemble} always appear in a matched set, with
C       Initialize preceding Assemble. Values can only be set in
C       between a call to Initialize and Assemble.
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_Assemble_f(self, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       The problem definition interface is a {\it builder} that
C       creates an object that contains the problem definition
C       information, e.g. a matrix. To perform subsequent operations
C       with that object, it must be returned from the problem
C       definition object. {\tt GetObject} performs this function.
C       At compile time, the type of the returned object is unknown.
C       Thus, the returned type is a sidl.BaseInterface.
C       QueryInterface or Cast must be used on the returned object to
C       convert it into a known type.
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_GetObject_f(self, A,
     &     retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       out sidl.BaseInterface A
        integer*8 A
C       out int retval
        integer*4 retval
        end


C       
C       Set the matrix graph.
C       DEPRECATED     Use Create
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_SetGraph_f(self, graph,
     &     retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in bHYPRE.SStructGraph graph
        integer*8 graph
C       out int retval
        integer*4 retval
        end


C       
C       Set matrix coefficients index by index.
C       
C       NOTE: Users are required to set values on all processes that
C       own the associated variables.  This means that some data will
C       be multiply defined.
C       
C       NOTE: The entries in this routine must all be of the same
C       type: either stencil or non-stencil, but not both.  Also, if
C       they are stencil entries, they must all represent couplings
C       to the same variable type (there are no such restrictions for
C       non-stencil entries).
C       
C       If the matrix is complex, then {\tt values} consists of pairs
C       of doubles representing the real and imaginary parts of each
C       complex value.
C       
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_SetValues_f(self, part,
     &     index, var, entries, values, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in int part
        integer*4 part
C       in int var
        integer*4 var
C       out int retval
        integer*4 retval
C       in rarray<int> index(dim)
        integer*4 index(0:dim-1)
C       in rarray<int> entries(nentries)
        integer*4 entries(0:nentries-1)
C       in rarray<double> values(nentries)
        double precision values(0:nentries-1)
        end


C       
C       Set matrix coefficients a box at a time.
C       
C       NOTE: Users are required to set values on all processes that
C       own the associated variables.  This means that some data will
C       be multiply defined.
C       
C       NOTE: The entries in this routine must all be of the same
C       type: either stencil or non-stencil, but not both.  Also, if
C       they are stencil entries, they must all represent couplings
C       to the same variable type (there are no such restrictions for
C       non-stencil entries).
C       
C       If the matrix is complex, then {\tt values} consists of pairs
C       of doubles representing the real and imaginary parts of each
C       complex value.
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_SetBoxValues_f(self, part,
     &     ilower, iupper, var, entries, values, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in int part
        integer*4 part
C       in int var
        integer*4 var
C       out int retval
        integer*4 retval
C       in rarray<int> ilower(dim)
        integer*4 ilower(0:dim-1)
C       in rarray<int> iupper(dim)
        integer*4 iupper(0:dim-1)
C       in rarray<int> entries(nentries)
        integer*4 entries(0:nentries-1)
C       in rarray<double> values(nvalues)
        double precision values(0:nvalues-1)
        end


C       
C       Add to matrix coefficients index by index.
C       
C       NOTE: Users are required to set values on all processes that
C       own the associated variables.  This means that some data will
C       be multiply defined.
C       
C       NOTE: The entries in this routine must all be of the same
C       type: either stencil or non-stencil, but not both.  Also, if
C       they are stencil entries, they must all represent couplings
C       to the same variable type.
C       
C       If the matrix is complex, then {\tt values} consists of pairs
C       of doubles representing the real and imaginary parts of each
C       complex value.
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_AddToValues_f(self, part,
     &     index, var, entries, values, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in int part
        integer*4 part
C       in int var
        integer*4 var
C       out int retval
        integer*4 retval
C       in rarray<int> index(dim)
        integer*4 index(0:dim-1)
C       in rarray<int> entries(nentries)
        integer*4 entries(0:nentries-1)
C       in rarray<double> values(nentries)
        double precision values(0:nentries-1)
        end


C       
C       Add to matrix coefficients a box at a time.
C       
C       NOTE: Users are required to set values on all processes that
C       own the associated variables.  This means that some data will
C       be multiply defined.
C       
C       NOTE: The entries in this routine must all be of stencil
C       type.  Also, they must all represent couplings to the same
C       variable type.
C       
C       If the matrix is complex, then {\tt values} consists of pairs
C       of doubles representing the real and imaginary parts of each
C       complex value.
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_AddToBoxValues_f(self,
     &     part, ilower, iupper, var, entries, values, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in int part
        integer*4 part
C       in int var
        integer*4 var
C       out int retval
        integer*4 retval
C       in rarray<int> ilower(dim)
        integer*4 ilower(0:dim-1)
C       in rarray<int> iupper(dim)
        integer*4 iupper(0:dim-1)
C       in rarray<int> entries(nentries)
        integer*4 entries(0:nentries-1)
C       in rarray<double> values(nvalues)
        double precision values(0:nvalues-1)
        end


C       
C       Define symmetry properties for the stencil entries in the
C       matrix.  The boolean argument {\tt symmetric} is applied to
C       stencil entries on part {\tt part} that couple variable {\tt
C       var} to variable {\tt to\_var}.  A value of -1 may be used
C       for {\tt part}, {\tt var}, or {\tt to\_var} to specify
C       ``all''.  For example, if {\tt part} and {\tt to\_var} are
C       set to -1, then the boolean is applied to stencil entries on
C       all parts that couple variable {\tt var} to all other
C       variables.
C       
C       By default, matrices are assumed to be nonsymmetric.
C       Significant storage savings can be made if the matrix is
C       symmetric.
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_SetSymmetric_f(self, part,
     &     var, to_var, symmetric, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in int part
        integer*4 part
C       in int var
        integer*4 var
C       in int to_var
        integer*4 to_var
C       in int symmetric
        integer*4 symmetric
C       out int retval
        integer*4 retval
        end


C       
C       Define symmetry properties for all non-stencil matrix
C       entries.
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_SetNSSymmetric_f(self,
     &     symmetric, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in int symmetric
        integer*4 symmetric
C       out int retval
        integer*4 retval
        end


C       
C       Set the matrix to be complex.
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_SetComplex_f(self, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       Print the matrix to file.  This is mainly for debugging
C       purposes.
C       
C       

        subroutine bHYPRE_SStructBuildMatrix_Print_f(self, filename,
     &     all, retval)
        implicit none
C       in bHYPRE.SStructBuildMatrix self
        integer*8 self
C       in string filename
        character*(*) filename
C       in int all
        integer*4 all
C       out int retval
        integer*4 retval
        end
