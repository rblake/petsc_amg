C       
C       File:          sidl_rmi_InstanceHandle_Impl.f
C       Symbol:        sidl.rmi.InstanceHandle-v0.9.3
C       Symbol Type:   interface
C       Babel Version: 0.10.4
C       Release:       $Name: V1-10-0b $
C       Revision:      @(#) $Id: sidl_rmi_InstanceHandle.fif,v 1.22 2005/12/15 00:36:08 painter Exp $
C       Description:   Client-side documentation text for sidl.rmi.InstanceHandle
C       
C       Copyright (c) 2000-2002, The Regents of the University of California.
C       Produced at the Lawrence Livermore National Laboratory.
C       Written by the Components Team <components@llnl.gov>
C       All rights reserved.
C       
C       This file is part of Babel. For more information, see
C       http://www.llnl.gov/CASC/components/. Please read the COPYRIGHT file
C       for Our Notice and the LICENSE file for the GNU Lesser General Public
C       License.
C       
C       This program is free software; you can redistribute it and/or modify it
C       under the terms of the GNU Lesser General Public License (as published by
C       the Free Software Foundation) version 2.1 dated February 1999.
C       
C       This program is distributed in the hope that it will be useful, but
C       WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
C       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
C       conditions of the GNU Lesser General Public License for more details.
C       
C       You should have recieved a copy of the GNU Lesser General Public License
C       along with this program; if not, write to the Free Software Foundation,
C       Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       babel-version = 0.10.4
C       xml-url       = /home/painter/babel-0.10.4/bin/.././share/repository/sidl.rmi.InstanceHandle-v0.9.3.xml
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "sidl.rmi.InstanceHandle" (version 0.9.3)
C       
C       This interface holds the state information for handles to remote
C       objects.  Client-side messaging libraries are expected to implement
C       <code>sidl.rmi.InstanceHandle</code>, <code>sidl.rmi.Invocation</code>
C       and <code>sidl.rmi.Response</code>.
C       
C        When a connection is created between a stub and a real object:
C             sidl_rmi_InstanceHandle c = sidl_rmi_ProtocolFactory_createInstance( url, typeName );
C       
C        When a method is invoked:
C             sidl_rmi_Invocation i = sidl_rmi_InstanceHandle_createInvocationHandle( methodname );
C             sidl_rmi_Invocation_packDouble( i, "input_val" , 2.0 );
C             sidl_rmi_Invocation_packString( i, "input_str", "Hello" );
C             ...
C             sidl_rmi_Response r = sidl_rmi_Invocation_invokeMethod( i );
C             sidl_rmi_Response_unpackBool( i, "_retval", &succeeded );
C             sidl_rmi_Response_unpackFloat( i, "output_val", &f );
C       
C       




C       
C       Cast method for interface and type conversions.
C       

        subroutine sidl_rmi_InstanceHandle__cast_f(ref, retval)
        implicit none
C       in opaque ref
        integer*8 ref
C       out sidl.rmi.InstanceHandle retval
        integer*8 retval
        end


C       
C       Cast method for interface and class type conversions.
C       

        subroutine sidl_rmi_InstanceHandle__cast2_f(self, name, retval)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       in string name
        character*(*) name
C       out opaque retval
        integer*8 retval
        end


C       
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine sidl_rmi_InstanceHandle_addRef_f(self)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
        end


C       
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine sidl_rmi_InstanceHandle_deleteRef_f(self)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
        end


C       
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine sidl_rmi_InstanceHandle_isSame_f(self, iobj, retval)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       in sidl.BaseInterface iobj
        integer*8 iobj
C       out bool retval
        logical retval
        end


C       
C       Check whether the object can support the specified interface or
C       class.  If the <code>sidl</code> type name in <code>name</code>
C       is supported, then a reference to that object is returned with the
C       reference count incremented.  The callee will be responsible for
C       calling <code>deleteRef</code> on the returned object.  If
C       the specified type is not supported, then a null reference is
C       returned.
C       

        subroutine sidl_rmi_InstanceHandle_queryInt_f(self, name,
     &     retval)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       in string name
        character*(*) name
C       out sidl.BaseInterface retval
        integer*8 retval
        end


C       
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine sidl_rmi_InstanceHandle_isType_f(self, name, retval)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       in string name
        character*(*) name
C       out bool retval
        logical retval
        end


C       
C       Return the meta-data about the class implementing this interface.
C       

        subroutine sidl_rmi_InstanceHandle_getClassInfo_f(self, retval)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       out sidl.ClassInfo retval
        integer*8 retval
        end


C       
C       initialize a connection (intended for use by the ProtocolFactory) 
C       

        subroutine sidl_rmi_InstanceHandle_initCreate_f(self, url,
     &     typeName, retval, exception)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       in string url
        character*(*) url
C       in string typeName
        character*(*) typeName
C       out bool retval
        logical retval
C       out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       initialize a connection (intended for use by the ProtocolFactory) 
C       

        subroutine sidl_rmi_InstanceHandle_initConnect_f(self, url,
     &     retval, exception)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       in string url
        character*(*) url
C       out bool retval
        logical retval
C       out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       return the name of the protocol 
C       

        subroutine sidl_rmi_InstanceHandle_getProtocol_f(self, retval,
     &     exception)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       out string retval
        character*(*) retval
C       out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       return the session ID 
C       

        subroutine sidl_rmi_InstanceHandle_getObjectID_f(self, retval,
     &     exception)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       out string retval
        character*(*) retval
C       out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       return the full URL for this object, takes the form: 
C        protocol://server:port/class/objectID
C       

        subroutine sidl_rmi_InstanceHandle_getURL_f(self, retval,
     &     exception)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       out string retval
        character*(*) retval
C       out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       create a handle to invoke a named method 
C       

        subroutine sidl_rmi_InstanceHandle_createInvocation_f(self,
     &     methodName, retval, exception)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       in string methodName
        character*(*) methodName
C       out sidl.rmi.Invocation retval
        integer*8 retval
C       out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       closes the connection (called be destructor, if not done explicitly) 
C       returns true if successful, false otherwise (including subsequent calls)
C       

        subroutine sidl_rmi_InstanceHandle_close_f(self, retval,
     &     exception)
        implicit none
C       in sidl.rmi.InstanceHandle self
        integer*8 self
C       out bool retval
        logical retval
C       out sidl.BaseInterface exception
        integer*8 exception
        end
