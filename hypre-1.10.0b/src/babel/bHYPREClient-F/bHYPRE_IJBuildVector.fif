C       
C       File:          bHYPRE_IJBuildVector_Impl.f
C       Symbol:        bHYPRE.IJBuildVector-v1.0.0
C       Symbol Type:   interface
C       Babel Version: 0.10.8
C       Description:   Client-side documentation text for bHYPRE.IJBuildVector
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       babel-version = 0.10.8
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "bHYPRE.IJBuildVector" (version 1.0.0)
C       




C       
C       Cast method for interface and type conversions.
C       

        subroutine bHYPRE_IJBuildVector__cast_f(ref, retval)
        implicit none
C       in opaque ref
        integer*8 ref
C       out bHYPRE.IJBuildVector retval
        integer*8 retval
        end


C       
C       Cast method for interface and class type conversions.
C       

        subroutine bHYPRE_IJBuildVector__cast2_f(self, name, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       in string name
        character*(*) name
C       out opaque retval
        integer*8 retval
        end


C       
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine bHYPRE_IJBuildVector_addRef_f(self)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
        end


C       
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine bHYPRE_IJBuildVector_deleteRef_f(self)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
        end


C       
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine bHYPRE_IJBuildVector_isSame_f(self, iobj, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       in sidl.BaseInterface iobj
        integer*8 iobj
C       out bool retval
        logical retval
        end


C       
C       Check whether the object can support the specified interface or
C       class.  If the <code>sidl</code> type name in <code>name</code>
C       is supported, then a reference to that object is returned with the
C       reference count incremented.  The callee will be responsible for
C       calling <code>deleteRef</code> on the returned object.  If
C       the specified type is not supported, then a null reference is
C       returned.
C       

        subroutine bHYPRE_IJBuildVector_queryInt_f(self, name, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       in string name
        character*(*) name
C       out sidl.BaseInterface retval
        integer*8 retval
        end


C       
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine bHYPRE_IJBuildVector_isType_f(self, name, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       in string name
        character*(*) name
C       out bool retval
        logical retval
        end


C       
C       Return the meta-data about the class implementing this interface.
C       

        subroutine bHYPRE_IJBuildVector_getClassInfo_f(self, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       out sidl.ClassInfo retval
        integer*8 retval
        end


C       
C       Set the MPI Communicator.  DEPRECATED, Use Create()
C       
C       

        subroutine bHYPRE_IJBuildVector_SetCommunicator_f(self,
     &     mpi_comm, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       in opaque mpi_comm
        integer*8 mpi_comm
C       out int retval
        integer*4 retval
        end


C       
C       Prepare an object for setting coefficient values, whether for
C       the first time or subsequently.
C       
C       

        subroutine bHYPRE_IJBuildVector_Initialize_f(self, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       Finalize the construction of an object before using, either
C       for the first time or on subsequent uses. {\tt Initialize}
C       and {\tt Assemble} always appear in a matched set, with
C       Initialize preceding Assemble. Values can only be set in
C       between a call to Initialize and Assemble.
C       
C       

        subroutine bHYPRE_IJBuildVector_Assemble_f(self, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       The problem definition interface is a {\it builder} that
C       creates an object that contains the problem definition
C       information, e.g. a matrix. To perform subsequent operations
C       with that object, it must be returned from the problem
C       definition object. {\tt GetObject} performs this function.
C       At compile time, the type of the returned object is unknown.
C       Thus, the returned type is a sidl.BaseInterface.
C       QueryInterface or Cast must be used on the returned object to
C       convert it into a known type.
C       
C       

        subroutine bHYPRE_IJBuildVector_GetObject_f(self, A, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       out sidl.BaseInterface A
        integer*8 A
C       out int retval
        integer*4 retval
        end


C       
C       Set the local range for a vector object.  Each process owns
C       some unique consecutive range of vector unknowns, indicated
C       by the global indices {\tt jlower} and {\tt jupper}.  The
C       data is required to be such that the value of {\tt jlower} on
C       any process $p$ be exactly one more than the value of {\tt
C       jupper} on process $p-1$.  Note that the first index of the
C       global vector may start with any integer value.  In
C       particular, one may use zero- or one-based indexing.
C       
C       Collective.
C       
C       

        subroutine bHYPRE_IJBuildVector_SetLocalRange_f(self, jlower,
     &     jupper, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       in int jlower
        integer*4 jlower
C       in int jupper
        integer*4 jupper
C       out int retval
        integer*4 retval
        end


C       
C       Sets values in vector.  The arrays {\tt values} and {\tt
C       indices} are of dimension {\tt nvalues} and contain the
C       vector values to be set and the corresponding global vector
C       indices, respectively.  Erases any previous values at the
C       specified locations and replaces them with new ones.
C       
C       Not collective.
C       
C       

        subroutine bHYPRE_IJBuildVector_SetValues_f(self, indices,
     &     values, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       out int retval
        integer*4 retval
C       in rarray<int> indices(nvalues)
        integer*4 indices(0:nvalues-1)
C       in rarray<double> values(nvalues)
        double precision values(0:nvalues-1)
        end


C       
C       Adds to values in vector.  Usage details are analogous to
C       {\tt SetValues}.
C       
C       Not collective.
C       
C       

        subroutine bHYPRE_IJBuildVector_AddToValues_f(self, indices,
     &     values, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       out int retval
        integer*4 retval
C       in rarray<int> indices(nvalues)
        integer*4 indices(0:nvalues-1)
C       in rarray<double> values(nvalues)
        double precision values(0:nvalues-1)
        end


C       
C       Returns range of the part of the vector owned by this
C       processor.
C       
C       

        subroutine bHYPRE_IJBuildVector_GetLocalRange_f(self, jlower,
     &     jupper, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       out int jlower
        integer*4 jlower
C       out int jupper
        integer*4 jupper
C       out int retval
        integer*4 retval
        end


C       
C       Gets values in vector.  Usage details are analogous to {\tt
C       SetValues}.
C       
C       Not collective.
C       
C       

        subroutine bHYPRE_IJBuildVector_GetValues_f(self, indices,
     &     values, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       out int retval
        integer*4 retval
C       in rarray<int> indices(nvalues)
        integer*4 indices(0:nvalues-1)
C       inout rarray<double> values(nvalues)
        double precision values(0:nvalues-1)
        end


C       
C       Print the vector to file.  This is mainly for debugging
C       purposes.
C       
C       

        subroutine bHYPRE_IJBuildVector_Print_f(self, filename, retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       in string filename
        character*(*) filename
C       out int retval
        integer*4 retval
        end


C       
C       Read the vector from file.  This is mainly for debugging
C       purposes.
C       
C       

        subroutine bHYPRE_IJBuildVector_Read_f(self, filename, comm,
     &     retval)
        implicit none
C       in bHYPRE.IJBuildVector self
        integer*8 self
C       in string filename
        character*(*) filename
C       in opaque comm
        integer*8 comm
C       out int retval
        integer*4 retval
        end
